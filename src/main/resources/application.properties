#端口号
server.port=8088
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/java
spring.devtools.restart.exclude=static/**,public/**

#控制台打印sql
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#sharingsphere-jdbc
#模式配置:内存模式、单机模式、集群模式
#内存模式
spring.shardingsphere.mode.type=Memory
#数据源配置
spring.shardingsphere.datasource.names=sharding-1000,sharding-1001

spring.shardingsphere.datasource.sharding-1000.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.sharding-1000.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.sharding-1000.jdbc-url= jdbc:mysql://localhost:3306/sharding_1000?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.shardingsphere.datasource.sharding-1000.username= root
spring.shardingsphere.datasource.sharding-1000.password= root

spring.shardingsphere.datasource.sharding-1001.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.sharding-1001.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.sharding-1001.jdbc-url= jdbc:mysql://localhost:3306/sharding_1001?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.shardingsphere.datasource.sharding-1001.username= root
spring.shardingsphere.datasource.sharding-1001.password= root

# 展示修改以后的sql语句
spring.shardingsphere.props.sql.show = true

spring.shardingsphere.sharding.default-database-strategy.complex.shardingColumns = db_no,co_id
spring.shardingsphere.sharding.default-database-strategy.complex.algorithmClassName = com.example.danque.sharding.algorithm.ComplexKeysShardingDbAlgorithm

spring.shardingsphere.sharding.tables.tb_vehicle.actual-data-nodes = sharding-$->{1000..1001}.tb_vehicle_$->{1..10}
spring.shardingsphere.sharding.tables.tb_vehicle.table-strategy.complex.shardingColumns = co_id
spring.shardingsphere.sharding.tables.tb_vehicle.table-strategy.complex.algorithmClassName = com.example.danque.sharding.algorithm.ComplexKeysShardingTableAlgorithm

#spring.shardingsphere.sharding.binding-tables = t_account,t_account_balance

#
## 标准分片表配置
## 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
## 缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.actual-data-nodes=sharding_1000.tb_vehicle_${1..10}
#
## 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
#
## 用于单分片键的标准分片场景
## 分片列名称
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.standard.sharding-column= co_id
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.sharding-algorithm-name=
#
### 用于多分片键的复合分片场景
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.complex.sharding-columns= co_id
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.database-strategy.complex.sharding-algorithm-name=
#
## 用于 Hint 的分片策略
## 分片算法名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.sharding-algorithm-name=
#
## 分表策略，同分库策略
#spring.shardingsphere.rules.sharding.tables.tb_vehicle.table-strategy.xxx= # 省略
#
## 自动分片表配置
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.actual-data-sources= # 数据源名
#
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.sharding-strategy.standard.sharding-column= db_no,co_id
#spring.shardingsphere.rules.sharding.auto-tables.tb_vehicle.sharding-strategy.standard.sharding-algorithm-name=
#
## 分布式序列策略配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称
#
#spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
#
#spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表
#
#spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
#spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
#spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
#spring.shardingsphere.sharding.default-sharding-column= # 默认分片列名称
#
## 分片算法配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx= # 分片算法属性配置
#
## 分布式序列算法配置
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置


